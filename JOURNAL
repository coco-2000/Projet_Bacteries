Programmation II (SV)

##JOURNAL du groupe 1 (Emma Boehly, Constance de Trogoff)

*************************************************
##Semaine 0

- inscription du groupe
- lecture de l'énonce

*************************************************
##Semaine 1 - Partie 1

- *ensemble* : création de la classe CircularBody
               début du codage de la classe CircularBody
               Installation de git
               Répartition des tâches pour l'étape 2

- La partie 1 a été modifié après son archivage :
    - Commentaires de CircularBody placés dans l'entête
    - Surcharges externes des opérateurs < et & (notre 1ère intuition mais après
      discussion avec un assistant, il avait insisté sur la relation asymétrique
      entre les 2 instances. Finalement notre assistant attitré nous a validé le
      fait qu'il fallait préférer la surcharge externe lorsque celle-ci est possible)


*************************************************
##Semaine 2 - Partie 2

- *Constance* : Création et implémentation des classes PetriDish et Lab (Partie 2.1)
- *Emma* : Création et implémentation de la classe Nutriment (Partie 2.2)
- *ensemble* : Croissance des nutriments (Partie 2.2),
               touche C et R (Partie 2.1),
               modification sur la partie 1,
               correction des erreurs constatées lors des tests


- Problèmes : - Introduction de nouveaux raccourcis dans le fichier Config ? Non à éviter
              - Comment traiter la condition portant sur le debordement de l'assiette lors de la
                croissance des nutriments ? Vérification condition lors d'appel depuis les SuperClasses

- La partie 2 a été modifié après son archivage :
    - Supression des constantes globales crées dans les entêtes (au début crée pour un code
      plus synthétique, au final la présence de constantes globales n'était pas souhaitée)
    - Accès à la température pour la classe Nutriment (nous pensions que celle-ci n'avait
      besoin d'être connu que par l'assiette de Petri)
    - modification de la classe update de PetriDish et de Nutriment car on verifiait les conditions sur
      la température pour la croissance des nutriments dans la classe PetriDish.
      Or ces conditions devaient être vérifiées dans la classe Nutriment pour permettre
      le polymorphisme

*************************************************
##Semaine 3 - Partie 3

- *Constance* : Création et implémentation des classes NutrimentA, NutrimentB et NutrimentGenerator (Partie 3.1)
- *Emma* : Création et implémentation des classes MutableNumber et MutableColor (Partie 3.2)
- *ensemble* : Modification de la partie 2, gestion des problèmes, modification des méthodes associées à la touche C

- Problèmes : Coder destructeur explicite ou pas ? Non pour CircularBody (géré par SousClasses),
              NutrimentGenerator, Nutriment (géré par PetriDish), Oui pour Lab (appel de reset)


*************************************************
## Semaine 4 - Partie 3

- *ensemble* : Création et implémentation de la classe Bacterium (Partie 3.3)
               Création et implémentation de la classe SimpleBacterium (Partie 3.4)
               relecture générale du code des parties précedentes, apport de petites modifications (pour une meilleure lisibilité du code)
- Problèmes : Bactérie qui ne se déplace pas (inversion de la direction à chaque pas)

*************************************************
##Semaine 5 - Partie 4

- *Constance* : Création et implémentation de la classe TwitchingBacterium (Partie 4.1)
                changements sur la methode move de SimpleBacterium, supression de setDirection de SimpleBacterium,
                ajout de rotationAngle dans Bacterium (Partie 3.4)
- *Emma* : Création et implémentation de la classe Swarm et SwarmBacterium (Partie 4.2)
           changement relation d'héritage SimpleBacterium (Partie 3.4),

- Problèmes : Utilisation de la fonction de move de CircularBody dans les fonctions move des bactéries ? Oui
              Avant la modification de l'énoncé, bug généré par la classe Grip codée dans Utility,
              SimpleBacterium et Swarm hérite de DiffEqFuntion (pas de composition)
              Après un certain temps de simulation les TwitchingBacterium ne déploient plus leur tentacule (vitesse = 0) et deviennent immortelles

- La partie 3 a été modifié après son archivage :
    - changements sur la methode move de SimpleBacterium, supression de setDirection de SimpleBacterium, ajout de rotationAngle dans Bacterium
    - changement relation d'héritage SimpleBacterium : hérite désormais de DiffEqFuntion

*************************************************
##Semaine 6

- *ensemble* : relecture générale du code, apport de petites modifications avant le rendu

- Problèmes : Pourquoi est-ce que appuyer sur la touche R pour mettre la simulation à zéro
              ne réinitialise pas la puissance (gradient exponent)
              Lors de la relecture, découverte d'un bug au moment de l'exécution de NutrimentTest
              causé par un undefined behavior dans le code de NutrimentTest (problème énoncé)

Point où nous en sommes : Partie 4 terminée
Toutes les parties antérieures sont fonctionelles

*************************************************
##Semaine 7 - Partie 5

- *Constance* : Création et implémentation de la classe Stats
- *Emma* : Implémentation de l'impact différencié des nutriments, résolution de la disparition inattendu des SwarmBacterium

- Problème : Parfois toutes les SwarmBacterium meurent d'un coup : gestion de la mise à jour du leader en faute

*************************************************
##Semaine 8 - Partie 5

- *Constance* : Nouvelle conception de l'implementation des stats en accords avec les attentes de l'assistant, correction suite au rendu intermédiaire
- *Emma* : Correction suite au rendu intermédiaire,
           modification de la perception du gradient par les bactéries (peuvent être répulsées par les nutriments toxiques)

*************************************************
##Semaine 9 - Partie 6

- *Constance* : Création et implémentation de la classe Obstacle, ainsi que le mécanisme de répulsion qui leur est associé, suppression des bactéries
                nutriments se trouvant sous les obstacles, croissance des nutriments bloquées par les obstacles.
- *Emma* : Création et implémentation de la classe Poison et PoisonBacterium, gestion de l'impact des poisons sur le déplacement des bactéries

- Problèmes : Comment gérer la perception du gradient avec des nutriments cachés par un obstacle ? Prise en compte des obstacles dans la perception du
                gradient avec impact négatif (répusion)
              Présence de point fixe du gradient qui attire les bactéries et les bloquent -> Conséquence des choix d'implémentation
              Implémentation d'un mécanisme au cours duquel la bactérie ne "voyait" plus les obstacles par un système d'intersections mais ceci diminuait
                considérablement les performances du programme.

*************************************************
##Semaine 10 - Partie 6

- *Constance* : création des murs pour que les bactéries puissent vivre en autonomie, implémentation du mode perdu pour les obstacles
                et pour la petri, ajout de la texture de l'obstacle
- *Emma*      : correction d'un bug du mode perdu, résolution des bactéries sortant de la pétri, implémentation du mode perdu SwarmBacterium, ajout graphes
                ajout graphe poison bacterium et poison
- *ensemble*  : conception du mode perdu SwarmBacterium,

- Problèmes : Bactéries se collent parfois sur le bord de la petri ->  mode perdu lors des collisions sur la petri pour un comportement
              similaire à celui des obstacles
              Bactéries sortent parfois de la PetriDish : décalage au niveau du test de collision (pas trop grand et bactéries rebondissent alors
              qu'elles chevauchent le bord de la Petri

*************************************************
##Semaine 11 - Partie 6

- *Constance* : Ecriture ReadMe, résolution immortalité des twitching bacterium, résolution tumble worse nul
                Rajout stats : nb moyen de division par bactérie et décompte des sous classes de nutriment
- *Emma* : Création de la classe SwimmingBacterium, superclasse de Poison et SimpleBacterium pour rassembler les méthodes communes,
           création des raccourcis dans la classe Config, complément ReadMe

- *ensemble* : relecture générale du code, commentaires, modifications + corrections des bugs
